#include "Arduino.h"
#include <ESP8266WiFi.h>
#include <assert.h>
#include "switch.h"
#include "wifimon.h"
#include "tx.h"
#include "doormon.h"

#ifndef LED_BUILTIN
#define LED_BUILTIN 16
#endif

#define BTN_RESET 14  // GPIO14 = D5
#define BTN_DOOR  12  // GPIO12 = D6
#define REED_SWITCH0   13   // GPIO13 = D7
#define LED_DOOR 5
#define LED_WIFI 2 // GPIO2 = D4
typedef struct
{
    switch_t btn_door;
    switch_t rswitch0;
    wifimon_t wifimon;
    doormon_t doormon;
} state_t;
state_t state;

void setup()
{
    Serial.begin(115200);
    delay(10); // need this?

    // wifi_init(&state.wifi, "obedientbuttersquid","P00pietou", LED_BUILTIN);
    //wifi_init(&state.wifi, "GSGNet2","Gsg@nnex190", LED_BUILTIN);
    // ifttt_init(&state.ifttt, 
    //            "https://maker.ifttt.com/trigger/door_open/with/key/dPNKnsERPhI__R2WUDuXJV");

    Serial.println("button setup");
    Serial.flush();

    wifimon_init(&state.wifimon, LED_WIFI, BTN_RESET);

    doormon_init(&state.doormon, REED_SWITCH0, BTN_DOOR, LED_DOOR);

    //pinMode(BTN_RESET, INPUT_PULLUP);
    Serial.println("setup complete");
    Serial.flush();
}

void loop()
{
    static int count = 0;

    // slow down update rate
    count++;
    if ((count % 20000)==0)
    {
        wifimon_update(&state.wifimon);
        doormon_update(&state.doormon);
    }

#if 0
    if (switch_update_state(&state.btn_door)==1)
    {
        long duration = switch_get_state_duration(&state.btn_door);
        Serial.println("door closed, duration=" + String(duration));
        digitalWrite(LED_DOOR, LOW);   // pin LOW -> LED ON
    }
    else
    {
        digitalWrite(LED_DOOR, HIGH);
    }
    if (switch_update_state(&state.rswitch0)==1)
    {
        long duration = switch_get_state_duration(&state.rswitch0);
        Serial.println("reed switch closed, duration=" + String(duration));
    }
#endif

#if 0
    if (switch_update_state(&state.wifimon.reset_button)==1)
    {
         Serial.println("reset CLOSED");
    }
#endif
}

//handle diagnostic informations given by assertion and abort program execution:
void __assert(const char *__func, const char *__file, int __lineno, const char *__sexp) {
    // transmit diagnostic informations through serial link. 
    Serial.println(__func);
    Serial.println(__file);
    Serial.println(__lineno, DEC);
    Serial.println(__sexp);
    Serial.flush();
    // abort program execution.
    abort();
}
